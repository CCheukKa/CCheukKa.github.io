{"mappings":"I,E,E,E,E,E,C,E,E,C,E,O,E,C,E,Y,iB,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECEe,SAAA,EAAiB,CAAkB,CAAE,CAA0B,EAsC1E,SAAS,EAAU,CAAS,EACxB,OAAO,GAAK,EAAI,EAAI,EAAI,EAAU,EAAI,EAC1C,CAKA,OADsB,AA3CtB,SACI,CAAkB,CAClB,CAAiE,EAEjE,IAAM,EAAU,OAAO,IAAI,CAAC,GACtB,EAAI,EAAQ,MAAM,CAClB,EAA6B,CAAC,EAEpC,IAAK,IAAM,KAAU,EACjB,CAAa,CAAC,EAAO,CAAG,EAG5B,IAAK,IAAI,EAAY,EAAG,EAAa,GAAK,EAAI,IAAa,CACvD,IAAM,EAA6B,EAAE,CACrC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACf,EAAa,GAAK,GAClB,EAAiB,IAAI,CAAC,CAAO,CAAC,EAAE,EAIxC,IAAK,IAAM,KAAU,EAAkB,CACnC,IAAM,EAAgB,EAAiB,MAAM,CAAC,AAAA,GAAK,IAAM,GAGnD,EAAuB,AAFL,EAAa,EAAkB,GAC5B,EAAa,EAAe,GAGjD,EAAgB,EAAiB,MAAM,CAEvC,EAAS,EADW,EAAc,MAAM,EACA,EAAU,EAAI,GAAiB,EAAU,EAEvF,CAAA,CAAa,CAAC,EAAO,EAAI,EAAuB,CACpD,CACJ,CAEA,OAAO,CACX,EAQuC,EAAO,EAElD,C,O,c,C,E,O,C,U,C,I,I,E,I,K,E,W,C,E,a,C,C,E,G,E","sources":["<anon>","Shapely.ts"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire38c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire38c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5SBNj\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $2ce35957dfdb52e1$export$2e2bcd8739ae039);\nfunction $2ce35957dfdb52e1$export$2e2bcd8739ae039(costs, costFunction) {\n    function getShapleyValues(costs, costFunction) {\n        const players = Object.keys(costs);\n        const n = players.length;\n        const shapleyValues = {};\n        for (const player of players)shapleyValues[player] = 0;\n        for(let coalition = 0; coalition < 1 << n; coalition++){\n            const coalitionPlayers = [];\n            for(let i = 0; i < n; i++)if (coalition & 1 << i) coalitionPlayers.push(players[i]);\n            for (const player of coalitionPlayers){\n                const withoutPlayer = coalitionPlayers.filter((p)=>p !== player);\n                const withPlayerValue = costFunction(coalitionPlayers, costs);\n                const withoutPlayerValue = costFunction(withoutPlayer, costs);\n                const marginalContribution = withPlayerValue - withoutPlayerValue;\n                const coalitionSize = coalitionPlayers.length;\n                const withoutPlayerSize = withoutPlayer.length;\n                const weight = factorial(withoutPlayerSize) * factorial(n - coalitionSize) / factorial(n);\n                shapleyValues[player] += marginalContribution * weight;\n            }\n        }\n        return shapleyValues;\n    }\n    function factorial(n) {\n        return n <= 1 ? 1 : n * factorial(n - 1);\n    }\n    //\n    const shapleyValues = getShapleyValues(costs, costFunction);\n    return shapleyValues;\n}\n\n});\n\n\nparcelRequire(\"5SBNj\");\n})();\n//# sourceMappingURL=Shapely.js.map\n","export type PlayerValue = { [player in string]: number };\r\nexport type CostFunction = (coalition: string[], costs: PlayerValue) => number;\r\nexport default function shapley(costs: PlayerValue, costFunction: CostFunction): PlayerValue {\r\n    function getShapleyValues(\r\n        costs: PlayerValue,\r\n        costFunction: (coalition: string[], costs: PlayerValue) => number\r\n    ): PlayerValue {\r\n        const players = Object.keys(costs) as string[];\r\n        const n = players.length;\r\n        const shapleyValues: PlayerValue = {};\r\n\r\n        for (const player of players) {\r\n            shapleyValues[player] = 0;\r\n        }\r\n\r\n        for (let coalition = 0; coalition < (1 << n); coalition++) {\r\n            const coalitionPlayers: string[] = [];\r\n            for (let i = 0; i < n; i++) {\r\n                if (coalition & (1 << i)) {\r\n                    coalitionPlayers.push(players[i]);\r\n                }\r\n            }\r\n\r\n            for (const player of coalitionPlayers) {\r\n                const withoutPlayer = coalitionPlayers.filter(p => p !== player);\r\n                const withPlayerValue = costFunction(coalitionPlayers, costs);\r\n                const withoutPlayerValue = costFunction(withoutPlayer, costs);\r\n                const marginalContribution = withPlayerValue - withoutPlayerValue;\r\n\r\n                const coalitionSize = coalitionPlayers.length;\r\n                const withoutPlayerSize = withoutPlayer.length;\r\n                const weight = factorial(withoutPlayerSize) * factorial(n - coalitionSize) / factorial(n);\r\n\r\n                shapleyValues[player] += marginalContribution * weight;\r\n            }\r\n        }\r\n\r\n        return shapleyValues;\r\n    }\r\n\r\n    function factorial(n: number): number {\r\n        return n <= 1 ? 1 : n * factorial(n - 1);\r\n    }\r\n\r\n    //\r\n\r\n    const shapleyValues = getShapleyValues(costs, costFunction);\r\n    return shapleyValues;\r\n}"],"names":["$parcel$global","$parcel$modules","$parcel$inits","parcelRequire","globalThis","id","exports","init","module","call","err","Error","code","register","parcelRegister","$2ce35957dfdb52e1$export$2e2bcd8739ae039","costs","costFunction","factorial","n","getShapleyValues","players","Object","keys","length","shapleyValues","player","coalition","coalitionPlayers","i","push","withoutPlayer","filter","p","marginalContribution","withPlayerValue","coalitionSize","weight","defineProperty","get","set","s","enumerable","configurable"],"version":3,"file":"Shapely.js.map"}