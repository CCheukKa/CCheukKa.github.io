{"mappings":"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","sources":["<anon>","index.ts","Shapely.ts"],"sourcesContent":["(() => {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire38c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire38c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"z89Iw\", function(module, exports) {\n\nvar $5SBNj = parcelRequire(\"5SBNj\");\nconst calculateShapely = (costs)=>{\n    const costFunction = !useCustomCostFunctionButton.checked ? (coalition, costs)=>{\n        const coalitionCosts = coalition.map((player)=>costs[player]).sort((a, b)=>a - b);\n        const totalCost = coalitionCosts.slice(-4).reduce((sum, cost)=>sum + cost / 2, 0);\n        const remainingSum = coalitionCosts.slice(0, -4).reduce((sum, cost)=>sum + cost, 0);\n        return totalCost + remainingSum;\n    } : (coalition, costs)=>{\n        // ! Very spooky\n        let returnValue;\n        eval(customCostFunction.value);\n        if (typeof returnValue !== \"number\") {\n            window.alert(\"Cost function must return a number\");\n            throw new Error(\"Cost function must return a number\");\n        }\n        return returnValue;\n    };\n    // \n    const shapleyValues = (0, $5SBNj.default)(costs, costFunction);\n    const valueDifferences = Object.fromEntries(Object.entries(shapleyValues).map(([player, value])=>[\n            player,\n            value - costs[player]\n        ]));\n    const valuePercents = Object.fromEntries(Object.entries(shapleyValues).map(([player, value])=>[\n            player,\n            value / costs[player] * 100\n        ]));\n    const playerData = Object.entries(costs).map(([player, cost])=>({\n            player: player,\n            cost: cost,\n            shapley: shapleyValues[player],\n            difference: valueDifferences[player],\n            percent: valuePercents[player]\n        }));\n    console.table(playerData);\n    return playerData;\n};\nconst shapelyTable = document.getElementById(\"shapely-table\");\nconst rowTemplate = document.getElementById(\"row-template\");\nconst addRowButton = document.getElementById(\"add-row-button\");\nconst calculateButton = document.getElementById(\"calculate-button\");\nconst customCostFunction = document.getElementById(\"cost-function\");\nconst useCustomCostFunctionButton = document.getElementById(\"use-custom-cost-function\");\naddRowButton.addEventListener(\"click\", ()=>{\n    const row = rowTemplate.content.cloneNode(true);\n    shapelyTable.querySelector(\"tbody\").appendChild(row);\n    const rowIndex = shapelyTable.querySelectorAll(\"tbody>tr\").length;\n    shapelyTable.querySelector(\"tbody>tr:last-child #player\").value = `P${rowIndex}`;\n    shapelyTable.querySelector(\"tbody>tr:last-child #cost\").value = `${0}`;\n});\nfor(let i = 0; i < 4; i++)addRowButton.click();\nshapelyTable.addEventListener(\"click\", (event)=>{\n    if (event.target.matches(\"button.delete-row-button\")) {\n        const row = event.target.closest(\"tr\");\n        row.remove();\n    }\n});\ncalculateButton.addEventListener(\"click\", ()=>{\n    const playerInputData = Array.from(shapelyTable.querySelectorAll(\"tbody>tr\")).map((row)=>{\n        const player = row.querySelector(\"#player\").value;\n        const cost = Number(row.querySelector(\"#cost\").value);\n        return {\n            player: player,\n            cost: cost\n        };\n    });\n    const costs = Object.fromEntries(playerInputData.map(({ player, cost })=>[\n            player,\n            cost\n        ]));\n    const playerData = calculateShapely(costs);\n    const tbody = shapelyTable.querySelector(\"tbody\");\n    playerData.forEach((data, index)=>{\n        tbody.children[index + 1].querySelector(\".shapely\").innerHTML = data.shapley.toFixed(2);\n        tbody.children[index + 1].querySelector(\".difference\").innerHTML = data.difference.toFixed(2);\n        tbody.children[index + 1].querySelector(\".percent\").innerHTML = data.percent.toFixed(2);\n    });\n}); // const costs: PlayerValue = {\n //     Ka: 1035 + 1226,\n //     Martin: 5400,\n //     Fiona: 5400,\n //     Tommy: 5400,\n //     Ricky: 5400,\n //     Michelle: 5400,\n // };\n // calculateShapely(costs);\n\n});\nparcelRegister(\"5SBNj\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $2ce35957dfdb52e1$export$2e2bcd8739ae039);\nfunction $2ce35957dfdb52e1$export$2e2bcd8739ae039(costs, costFunction) {\n    function getShapleyValues(costs, costFunction) {\n        const players = Object.keys(costs);\n        const n = players.length;\n        const shapleyValues = {};\n        for (const player of players)shapleyValues[player] = 0;\n        for(let coalition = 0; coalition < 1 << n; coalition++){\n            const coalitionPlayers = [];\n            for(let i = 0; i < n; i++)if (coalition & 1 << i) coalitionPlayers.push(players[i]);\n            for (const player of coalitionPlayers){\n                const withoutPlayer = coalitionPlayers.filter((p)=>p !== player);\n                const withPlayerValue = costFunction(coalitionPlayers, costs);\n                const withoutPlayerValue = costFunction(withoutPlayer, costs);\n                const marginalContribution = withPlayerValue - withoutPlayerValue;\n                const coalitionSize = coalitionPlayers.length;\n                const withoutPlayerSize = withoutPlayer.length;\n                const weight = factorial(withoutPlayerSize) * factorial(n - coalitionSize) / factorial(n);\n                shapleyValues[player] += marginalContribution * weight;\n            }\n        }\n        return shapleyValues;\n    }\n    function factorial(n) {\n        return n <= 1 ? 1 : n * factorial(n - 1);\n    }\n    //\n    const shapleyValues = getShapleyValues(costs, costFunction);\n    return shapleyValues;\n}\n\n});\n\n\n\nparcelRequire(\"z89Iw\");\n})();\n//# sourceMappingURL=index.js.map\n","import shapley, { CostFunction, PlayerValue } from \"./Shapely\";\r\n\r\ntype PlayerData = { player: string, cost: number, shapley: number, difference: number, percent: number };\r\nconst calculateShapely = (costs: PlayerValue): PlayerData[] => {\r\n    const costFunction: CostFunction =\r\n        !useCustomCostFunctionButton.checked\r\n            ? (coalition: string[], costs: PlayerValue): number => {\r\n                const coalitionCosts = coalition.map(player => costs[player]).sort((a, b) => a - b);\r\n                const totalCost = coalitionCosts.slice(-4).reduce((sum, cost) => sum + cost / 2, 0);\r\n                const remainingSum = coalitionCosts.slice(0, -4).reduce((sum, cost) => sum + cost, 0);\r\n                return totalCost + remainingSum;\r\n            }\r\n            : (coalition: string[], costs: PlayerValue): number => {\r\n                // ! Very spooky\r\n                let returnValue;\r\n                eval(customCostFunction.value);\r\n                if (typeof returnValue !== 'number') {\r\n                    window.alert('Cost function must return a number');\r\n                    throw new Error('Cost function must return a number');\r\n                }\r\n                return returnValue! as number;\r\n            };\r\n\r\n    // \r\n    const shapleyValues: PlayerValue = shapley(costs, costFunction);\r\n    const valueDifferences: PlayerValue = Object.fromEntries(\r\n        Object.entries(shapleyValues).map(([player, value]) => [player, value - costs[player]])\r\n    );\r\n    const valuePercents: PlayerValue = Object.fromEntries(\r\n        Object.entries(shapleyValues).map(([player, value]) => [player, value / costs[player] * 100])\r\n    );\r\n    const playerData: PlayerData[] = Object.entries(costs).map(([player, cost]) => ({\r\n        player,\r\n        cost,\r\n        shapley: shapleyValues[player],\r\n        difference: valueDifferences[player],\r\n        percent: valuePercents[player],\r\n    }));\r\n\r\n    console.table(playerData);\r\n    return playerData;\r\n}\r\n\r\nconst shapelyTable = document.getElementById('shapely-table') as HTMLTableElement;\r\nconst rowTemplate = document.getElementById('row-template') as HTMLTemplateElement;\r\nconst addRowButton = document.getElementById('add-row-button') as HTMLButtonElement;\r\nconst calculateButton = document.getElementById('calculate-button') as HTMLButtonElement;\r\nconst customCostFunction = document.getElementById('cost-function') as HTMLTextAreaElement;\r\nconst useCustomCostFunctionButton = document.getElementById('use-custom-cost-function') as HTMLInputElement;\r\naddRowButton.addEventListener('click', () => {\r\n    const row = rowTemplate.content.cloneNode(true) as HTMLTableRowElement;\r\n    shapelyTable.querySelector('tbody')!.appendChild(row);\r\n    const rowIndex = shapelyTable.querySelectorAll('tbody>tr').length;\r\n    (shapelyTable.querySelector('tbody>tr:last-child #player') as HTMLInputElement).value = `P${rowIndex}`;\r\n    (shapelyTable.querySelector('tbody>tr:last-child #cost') as HTMLInputElement).value = `${0}`;\r\n});\r\nfor (let i = 0; i < 4; i++) { addRowButton.click(); }\r\nshapelyTable.addEventListener('click', (event: MouseEvent) => {\r\n    if ((event.target as HTMLElement).matches('button.delete-row-button')) {\r\n        const row = (event.target as HTMLElement).closest('tr')!;\r\n        row.remove();\r\n    }\r\n});\r\ncalculateButton.addEventListener('click', () => {\r\n    const playerInputData = Array.from(shapelyTable.querySelectorAll('tbody>tr')).map(row => {\r\n        const player = (row.querySelector('#player') as HTMLInputElement).value;\r\n        const cost = Number((row.querySelector('#cost') as HTMLInputElement).value);\r\n        return { player, cost };\r\n    });\r\n    const costs: PlayerValue = Object.fromEntries(playerInputData.map(({ player, cost }) => [player, cost]));\r\n\r\n    const playerData = calculateShapely(costs);\r\n    const tbody = shapelyTable.querySelector('tbody')!;\r\n    playerData.forEach((data, index) => {\r\n        (tbody.children[index + 1].querySelector('.shapely') as HTMLTableCellElement).innerHTML = data.shapley.toFixed(2);\r\n        (tbody.children[index + 1].querySelector('.difference') as HTMLTableCellElement).innerHTML = data.difference.toFixed(2);\r\n        (tbody.children[index + 1].querySelector('.percent') as HTMLTableCellElement).innerHTML = data.percent.toFixed(2);\r\n    });\r\n});\r\n\r\n// const costs: PlayerValue = {\r\n//     Ka: 1035 + 1226,\r\n//     Martin: 5400,\r\n//     Fiona: 5400,\r\n//     Tommy: 5400,\r\n//     Ricky: 5400,\r\n//     Michelle: 5400,\r\n// };\r\n// calculateShapely(costs);","export type PlayerValue = { [player in string]: number };\r\nexport type CostFunction = (coalition: string[], costs: PlayerValue) => number;\r\nexport default function shapley(costs: PlayerValue, costFunction: CostFunction): PlayerValue {\r\n    function getShapleyValues(\r\n        costs: PlayerValue,\r\n        costFunction: (coalition: string[], costs: PlayerValue) => number\r\n    ): PlayerValue {\r\n        const players = Object.keys(costs) as string[];\r\n        const n = players.length;\r\n        const shapleyValues: PlayerValue = {};\r\n\r\n        for (const player of players) {\r\n            shapleyValues[player] = 0;\r\n        }\r\n\r\n        for (let coalition = 0; coalition < (1 << n); coalition++) {\r\n            const coalitionPlayers: string[] = [];\r\n            for (let i = 0; i < n; i++) {\r\n                if (coalition & (1 << i)) {\r\n                    coalitionPlayers.push(players[i]);\r\n                }\r\n            }\r\n\r\n            for (const player of coalitionPlayers) {\r\n                const withoutPlayer = coalitionPlayers.filter(p => p !== player);\r\n                const withPlayerValue = costFunction(coalitionPlayers, costs);\r\n                const withoutPlayerValue = costFunction(withoutPlayer, costs);\r\n                const marginalContribution = withPlayerValue - withoutPlayerValue;\r\n\r\n                const coalitionSize = coalitionPlayers.length;\r\n                const withoutPlayerSize = withoutPlayer.length;\r\n                const weight = factorial(withoutPlayerSize) * factorial(n - coalitionSize) / factorial(n);\r\n\r\n                shapleyValues[player] += marginalContribution * weight;\r\n            }\r\n        }\r\n\r\n        return shapleyValues;\r\n    }\r\n\r\n    function factorial(n: number): number {\r\n        return n <= 1 ? 1 : n * factorial(n - 1);\r\n    }\r\n\r\n    //\r\n\r\n    const shapleyValues = getShapleyValues(costs, costFunction);\r\n    return shapleyValues;\r\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$5SBNj","calculateShapely","costs","costFunction","useCustomCostFunctionButton","checked","coalition","returnValue","eval","customCostFunction","value","window","alert","coalitionCosts","map","player","sort","a","b","totalCost","slice","reduce","sum","cost","shapleyValues","default","valueDifferences","fromEntries","entries","valuePercents","playerData","shapley","difference","percent","console","table","shapelyTable","document","getElementById","rowTemplate","addRowButton","calculateButton","addEventListener","row","content","cloneNode","querySelector","appendChild","rowIndex","querySelectorAll","length","i","click","event","target","matches","closest","remove","playerInputData","Array","from","Number","tbody","forEach","data","index","children","innerHTML","toFixed","$2ce35957dfdb52e1$export$2e2bcd8739ae039","factorial","getShapleyValues","players","keys","coalitionPlayers","push","withoutPlayer","filter","p","marginalContribution","withPlayerValue","coalitionSize","weight"],"version":3,"file":"index.js.map"}